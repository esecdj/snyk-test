# .github/workflows/monitor-docker-build-usage.yml
name: Detect Docker Build Action Usage

on:
  pull_request:
    paths:
      - '.github/workflows/**'

jobs:
  detect-docker-build-action:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   
          
      - name: docker use check
        id: docker-check
        continue-on-error: true
        run: |
          if grep -hiE '\b(docker\s+push|docker/build-push-action|snyk-docker-action)\b' .github/workflows/*.yml --exclude='pr check.yml' | grep -viE '^\s*#'; then
            exit 1
          fi
      - name: git diff
        id: diff-check
#        continue-on-error: true
        if: steps.docker-check.outcome == 'failure'
        run: |
          set -e
                    
          changed_files=$(git diff --name-only origin/main...HEAD -- '.github/workflows/*.yml')
          
          if [ -z "$changed_files" ]; then
            echo "No workflow files changed"
            echo "[]" > violations.json
            exit 0
          fi
          
          echo "[" > violations.json
          first=true
          
          for file in $changed_files; do
            # Use git diff with large context and capture all lines (+, -, and unchanged)
            git diff --unified=10000 origin/main...HEAD -- "$file" | while IFS= read -r line; do
              # Determine line type for JSON
              if [[ "$line" =~ ^\+\+ ]]; then
                # Skip git diff metadata lines starting with ++
                continue
              elif [[ "$line" =~ ^@@ ]]; then
                # Skip hunk headers
                continue
              elif [[ "$line" =~ ^\+ ]]; then
                type="AddedLine"
                content="${line:1}"
              elif [[ "$line" =~ ^\- ]]; then
                type="DeletedLine"
                content="${line:1}"
              elif [[ "$line" =~ ^\  ]]; then
                type="UnchangedLine"
                content="${line:1}"
              else
                # Other lines (e.g., diff command output), skip
                continue
              fi
          
              # JSON escape content
              esc_content=$(printf '%s' "$content" | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')
          
              # Output JSON entry
              if [ "$first" = false ]; then
                echo "," >> violations.json
              else
                first=false
              fi
              echo "{\"file\": \"$file\", \"type\": \"$type\", \"content\": $esc_content}" >> violations.json
            done
          done
          
          echo "]" >> violations.json
        shell: bash

      - name: Print violations JSON
#        if: steps.diff-check.outcome == 'failure'
        run: jq . violations.json
